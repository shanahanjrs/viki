#!/usr/bin/env python3

"""
Viki cli
~~~~~~~~

The automation framework

Usage:
    viki h|help
    viki ll|list
    viki r|run <job_name>
    viki c|create <job_name>
    viki o|output <job_name>

Maintainer:
    John Shanahan <shanahan.jrs@gmail.com>

License:
    Apache 2.0
    http://www.apache.org/licenses/LICENSE-2.0
"""

# --- Imports

import argparse
import requests
import sys

import viki


# --- Private lib

def _list(host, port):
    """
    :return:
    """
    get_jobs_api_endpoint = '/api/v1/jobs'
    get_jobs_url = "{host}:{port}{api}".format(host=host, port=port, api=get_jobs_api_endpoint)

    try:
        ret = requests.get(get_jobs_url)
        out = ret.text
    except Exception as e:
        out = e

    return out


def _run(host, port, job_name, job_args=None):
    """
    :param job_name: Name of job to be run
    :param job_args: List of arguments to send with the job to be injected at run time
    :return:
    """
    run_job_api_endpoint = '/api/v1/job/{job_name}/run'.format(job_name=job_name)
    run_job_url = "{host}:{port}{api}".format(host=host, port=port, api=run_job_api_endpoint)

    try:
        ret = requests.post(run_job_url)
        out = ret.text
    except Exception as e:
        out = e

    return out


def _create(host, port, job_name):
    """
    :param job_name:
    :return:
    """
    ret = '*!* refactoring *!*'
    return ret


def _output(host, port, job_name):
    """
    :param job_name:
    :return:
    """
    job_output_api_endpoint = '/api/v1/job/{job_name}/output'.format(job_name=job_name)
    job_output_url = "{host}:{port}{api}".format(host=host, port=port, api=run_job_api_endpoint)

    try:
        ret = requests.post(job_output_url)
        out = ret.text
    except Exception as e:
        out = e

    return out

# --- Main

def main():
    """ Main """
    message = "Ok"
    return_code = 0

    # --- Define cli args/flags
    parser = argparse.ArgumentParser()

    # Main command
    parser.add_argument(
        'command',
        choices=['list', 'run', 'create', 'output'],
        nargs=argparse.REMAINDER,
        help='Command: [ list|run|create|output ]'
    )

    # Host to connect to
    parser.add_argument(
        '--host',
        default="http://localhost",
        help='Vikid host to connect to (default: "http://localhost")'
    )

    # Port to connect to host on
    parser.add_argument(
        '--port',
        default="9898",
        help='Port to connect to Vikid host on (default: "9898")'
    )

    # Output as json flag
    parser.add_argument(
        '--json',
        action='store_true',
        help='Show output as json (default: False)'
    )

    # Verbose execution
    parser.add_argument(
        '-V', '--verbose',
        action='store_true',
        help='Verbose execution details (default: False)'
    )

    # Version number flag
    parser.add_argument(
        '-v', '--version',
        action='version',
        version='{}'.format(viki.__version__),
        help='Display viki version'
    )

    # --- Parse cli args/flags
    args = parser.parse_args()

    # Flags
    output_as_json = args.json
    host = args.host
    port = args.port
    verbose = args.verbose

    # --- Command
    command_args_num = len(args.command)

    if command_args_num > 0:
        command_args = args.command[1:]

    command = args.command[0]

    # --- Main execution

    if verbose:
        print('verbose: ' + str(verbose))
        print('output_as_json: ' + str(output_as_json))
        print('host: ' + str(host))
        print('port: ' + str(port))

    if command == 'list':
        # List jobs
        message = _list(host, port)

    elif command == 'run':
        # Run a job
        if command_args_num < 1:
            print('Must specify job name to run.')
            sys.exit(1)

        job_name = command_args[0]
        message = _run(host, port, job_name)

    elif command == 'create':
        # Create a new job
        message = "-- Not yet implemented --"

    elif command == 'output':
        # Show the output of the last run of the specified job
        message = str(_output(host, port, args[2]))

    else:
        message = "Command not found"
        return_code = 1

    # Fin
    print(message)
    sys.exit(return_code)

if __name__ == "__main__":
    main()
